---
title: "Multi-armed Bandits"
format: html
---

<img src="images/bandits.png" width="100%"/>

Multi-armed bandits are a simplified version of reinforcement leraning called multi-armed bandits.

- No state is used for the selection of the next actions.

- However, it exists an "intermediate case" where the state is used, but the state itself does not depend on the previous actions, called ***contextual bandits***.

<h3>Bandits in practice</h3>

```{python}
import numpy as np
import random

class MultiArmedBandit:
    '''Create a k-armed bandit.

    Each bandit arm must have its reward distribution.

    The bandit has to receive the action: to select one of the k bandits,
    with possible value from 1 to 10.

    The bandit must have k random generators of two values i,j (with i < j):
    the min and max of the reward distribution.
    e.g.:
        1 3 -> 1.5, ...
        2 6 -> 2.1, 3.3, ...
        4 8 -> 4.2, 5.3, 7.8
    '''
    def __init__(self, k):
        self.arms = [self._create_generator() for i in range(k)]
        for i, arm in enumerate(self.arms):
            print(f"arm {i} range: {arm}")

    def _create_generator(self):
        lbound, ubound = 1, 10

        a = random.randint(lbound, ubound)
        b = random.randint(a, ubound)

        return a, b

    def get_reward(self, a: int):
        assert a >= 0 and a < len(self.arms)
        return random.uniform(*self.arms[a])

class ArmChooser:
    def __init__(self, k: int, eps: float, initial_value: float):
        self.Q, self.N = [initial_value] * k, [0.] * k
        self.eps = eps

    def _epsilon_greedy(self):
        if random.random() < 1 - self.eps:
            return np.argmax(self.Q)
        else:
            return random.randint(0, len(self.Q) - 1)
    
    def choose(self):
        a = self._epsilon_greedy()
        R = bandit.get_reward(a)
        print(f"R: {R}")
        self.N[a] += 1
        self.Q[a] += 1/self.N[a] * (R - self.Q[a])
        print(f"Q: {self.Q}")
        print (f"N: {self.N}")

k, T, eps, initial_value = 4, 10, 0.1, 10.
bandit = MultiArmedBandit(k)
chooser = ArmChooser(k, eps, initial_value)

for t in range(T):
    print(f"step {t}")
    chooser.choose()
```

## Exercise

<h3>Website serving ads with bandits</h3>

> Design a website that serve ads only using bandits.
>
>> Implement it (mock code).

[Link to html exercise](./exercises/serving_ads_with_bandits.html)



## References

Books for the bandit:

- **Chapter 2** of @sutton2018

- @lattimore2020